# build with the following command
# sudo docker build -f Dockerfile_openmc -t openmcworkshop/openmc

FROM ubuntu:18.04

# Python and OpenMC installation

RUN apt-get --yes update && apt-get --yes upgrade

RUN apt-get -y install locales
RUN locale-gen en_US.UTF-8
ENV LC_CTYPE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

# Install Packages Required
RUN apt-get --yes update && apt-get --yes upgrade
RUN apt-get --yes install gfortran 
RUN apt-get --yes install g++ 
RUN apt-get --yes install cmake 
RUN apt-get --yes install libhdf5-dev 
RUN apt-get --yes install git
RUN apt-get update

RUN apt-get install -y python3-pip
RUN apt-get install -y python3-dev
RUN apt-get install -y python3-setuptools
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get install -y ipython3
RUN apt-get update
RUN apt-get install -y python3-tk

#Install unzip
RUN apt-get update
RUN apt-get install -y unzip

#Install Packages Optional
RUN apt-get --yes update
RUN apt-get --yes install imagemagick
RUN apt-get --yes install hdf5-tools
RUN apt-get --yes install paraview
RUN apt-get --yes install eog
RUN apt-get --yes install wget
RUN apt-get --yes install firefox
RUN apt-get --yes install dpkg
RUN apt-get --yes install libxkbfile1

#Install Packages Optional for distributed memory parallel simulations
RUN apt install --yes mpich libmpich-dev
RUN apt install --yes openmpi-bin libopenmpi-dev

RUN apt-get --yes install libblas-dev 
# RUN apt-get --yes install libatlas-dev 
RUN apt-get --yes install liblapack-dev

# Python Prerequisites Required
RUN pip3 install numpy
RUN pip3 install pandas
RUN pip3 install six
RUN pip3 install h5py
RUN pip3 install Matplotlib
RUN pip3 install uncertainties
RUN pip3 install lxml
RUN pip3 install scipy

# Python Prerequisites Optional (Required)
RUN pip3 install cython
RUN pip3 install vtk
RUN apt-get install --yes libsilo-dev
RUN pip3 install pytest
RUN pip3 install codecov
RUN pip3 install pytest-cov
RUN pip3 install pylint

# Pyne requirments
RUN pip3 install tables
RUN pip3 install setuptools
RUN pip3 install prettytable
RUN pip3 install sphinxcontrib_bibtex
RUN pip3 install numpydoc
RUN pip3 install nbconvert
RUN pip3 install nose

# Clone and install NJOY2016
RUN git clone https://github.com/njoy/NJOY2016 /opt/NJOY2016 && \
    cd /opt/NJOY2016 && \
    mkdir build && cd build && \
    cmake -Dstatic=on .. && make 2>/dev/null && make install

RUN rm /usr/bin/python
RUN ln -s /usr/bin/python3 /usr/bin/python

# MOAB Variables
ENV MOAB_BRANCH='Version5.1.0'
ENV MOAB_REPO='https://bitbucket.org/fathomteam/moab/'
ENV MOAB_INSTALL_DIR=$HOME/MOAB/

# DAGMC Variables
ENV DAGMC_BRANCH='develop'
ENV DAGMC_REPO='https://github.com/svalinn/dagmc'
ENV DAGMC_INSTALL_DIR=$HOME/DAGMC/
RUN set -ex

# MOAB Install
RUN cd $HOME
RUN mkdir MOAB && cd MOAB && \
        git clone -b $MOAB_BRANCH $MOAB_REPO && \
        mkdir build && cd build && \
        cmake ../moab -DENABLE_HDF5=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$MOAB_INSTALL_DIR -DENABLE_PYMOAB=ON && \
        make && make test install && \
        cd pymoab && python3 setup.py install
        # cd .. && \
        # cmake ../moab -DBUILD_SHARED_LIBS=OFF && \
        # make install && \
        # rm -rf $HOME/MOAB/moab
ENV LD_LIBRARY_PATH=$MOAB_INSTALL_DIR/lib:$LD_LIBRARY_PATH

# DAGMC Install
RUN mkdir DAGMC && cd DAGMC && \
        git clone -b $DAGMC_BRANCH $DAGMC_REPO && \
        mkdir build && cd build && \
        cmake ../dagmc -DBUILD_TALLY=ON -DCMAKE_INSTALL_PREFIX=$DAGMC_INSTALL_DIR -DMOAB_DIR=$MOAB_INSTALL_DIR -DBUILD_STATIC_LIBS=OFF && \
        make install && \
        rm -rf $HOME/DAGMC/dagmc
ENV LD_LIBRARY_PATH=$DAGMC_INSTALL_DIR/lib:$LD_LIBRARY_PATH

ENV FC=mpif90
ENV CC=mpicc

# installs OpenMc from source
# RUN git clone https://github.com/openmc-dev/openmc.git && \  
RUN git clone https://github.com/makeclean/openmc.git && \
    cd openmc && \
#     git checkout develop && \
    git checkout dlopen_source && \
    mkdir build && cd build && \
    cmake -Ddagmc=ON .. && \
#     cmake -Ddagmc=ON -Ddebug=on .. && \
    make && \
    make install

RUN PATH="$PATH:/openmc/build/bin/"
RUN cp /openmc/build/bin/openmc /usr/local/bin

#this python install method allows source code changes to be trialed
RUN cd openmc && python3 setup.py develop 
# #RUN cd openmc && pip3 install .

RUN echo 'alias python="python3"' >> ~/.bashrc

